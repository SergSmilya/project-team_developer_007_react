{"version":3,"file":"static/js/949.a9f8c7f1.chunk.js","mappings":"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","sources":["webpack://project-team_developer_007_react/./src/components/LogInForm/LogInForm.module.css?b51d","components/LogInForm/LogInForm.jsx","pages/SignInPage/SignInPage.jsx","webpack://project-team_developer_007_react/./src/components/SignUpForm/SignUpForm.module.css?655f"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"LogIn__title\":\"LogInForm_LogIn__title__M5f1N\",\"LogIn__label\":\"LogInForm_LogIn__label__1EEEB\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { Link } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport sprite from '../../images/svg/sprite.svg';\nimport css from '../SignUpForm/SignUpForm.module.css';\nimport css_logIn from './LogInForm.module.css';\n\nconst initialValues = { email: '', password: '' };\n\nconst emailRegexp = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\nconst schema = yup.object().shape({\n  email: yup.string().matches(emailRegexp, 'Email is not valid').required(),\n  password: yup.string().min(6).required(),\n});\n\nexport const LogInForm = () => {\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values));\n\n    resetForm();\n  };\n\n  return (\n    <section className={css.Registration__Section}>\n      <div className={css.Registration__container}>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          validateOnChange={false}\n          validateOnBlur={false}\n          onSubmit={handleFormSubmit}\n        >\n          {({ errors, touched }) => (\n            <Form className={css.Registration__form}>\n              <b className={css_logIn.LogIn__title}>Sign In</b>\n\n              <label className={css_logIn.LogIn__label}>\n                <div className={css.Registration__inputwrapper}>\n                  <Field\n                    className={`${css.Registration__input} ${\n                      touched.email && errors.email\n                        ? `${css.Registration__input_error}`\n                        : touched.email && !errors.email\n                        ? `${css.Registration__input_success}`\n                        : ''\n                    }`}\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    required\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    render={msg => (\n                      <p className={css.Registration__error}>{msg}</p>\n                    )}\n                  />\n\n                  <svg\n                    width={18}\n                    height={18}\n                    className={`${css.Registration__svg} ${\n                      touched.email && errors.email\n                        ? `${css.Registration__svg_error}`\n                        : touched.email && !errors.email\n                        ? `${css.Registration__svg_success}`\n                        : ''\n                    }`}\n                  >\n                    <use href={sprite + '#reg-email'} />\n                  </svg>\n                </div>\n              </label>\n\n              <label className={css_logIn.LogIn__label}>\n                <div className={css.Registration__inputwrapper}>\n                  <Field\n                    className={`${css.Registration__input} ${\n                      touched.password && errors.password\n                        ? `${css.Registration__input_error}`\n                        : touched.password && !errors.password\n                        ? `${css.Registration__input_success}`\n                        : ''\n                    }`}\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    required\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    render={msg => (\n                      <p className={css.Registration__error}>\n                        Enter a valid Password\n                      </p>\n                    )}\n                  />\n\n                  <svg\n                    width={18}\n                    height={18}\n                    className={`${css.Registration__svg} ${\n                      touched.password && errors.password\n                        ? `${css.Registration__svg_error}`\n                        : touched.password && !errors.password\n                        ? `${css.Registration__svg_success}`\n                        : ''\n                    }`}\n                  >\n                    <use href={sprite + '#reg-pass'} />\n                  </svg>\n                </div>\n              </label>\n\n              <button className={css.Registration__button} type=\"submit\">\n                Sign In\n              </button>\n            </Form>\n          )}\n        </Formik>\n        <Link className={css.Registration__link} to=\"/register\">\n          Registration\n        </Link>\n      </div>\n    </section>\n  );\n};\n","import { LogInForm } from 'components/LogInForm/LogInForm';\nimport { useSelector } from 'react-redux';\n// import { selectAuthError, selectUserName } from 'redux/auth/selectors';\nimport { selectAuthError } from 'redux/auth/selectors';\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst SignInPage = () => {\n  const error = useSelector(selectAuthError);\n\n  if (error) {\n    Notify.failure('Sorry, something went wrong');\n  }\n\n  return (\n    <>\n      <LogInForm />\n    </>\n  );\n};\n\nexport default SignInPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"Registration__Section\":\"SignUpForm_Registration__Section__My4Ys\",\"Registration__container\":\"SignUpForm_Registration__container__ou-63\",\"Registration__form\":\"SignUpForm_Registration__form__vYYLk\",\"Registration__title\":\"SignUpForm_Registration__title__Q8P7x\",\"Registration__label\":\"SignUpForm_Registration__label__BIh-q\",\"Registration__input\":\"SignUpForm_Registration__input__woy2a\",\"Registration__button\":\"SignUpForm_Registration__button__K3mhK\",\"Registration__link\":\"SignUpForm_Registration__link__DIztg\",\"Registration__error\":\"SignUpForm_Registration__error__rF721\",\"Registration__input_success\":\"SignUpForm_Registration__input_success__OycYd\",\"Registration__input_error\":\"SignUpForm_Registration__input_error__9kTvw\",\"Registration__inputwrapper\":\"SignUpForm_Registration__inputwrapper__M5hn7\",\"Registration__svg\":\"SignUpForm_Registration__svg__XohDY\",\"Registration__svg_success\":\"SignUpForm_Registration__svg_success__4+Cq3\",\"Registration__svg_error\":\"SignUpForm_Registration__svg_error__gGuSA\"};"],"names":["initialValues","email","password","schema","yup","shape","matches","required","min","LogInForm","dispatch","useDispatch","className","css","validationSchema","validateOnChange","validateOnBlur","onSubmit","values","resetForm","logIn","errors","touched","css_logIn","type","name","placeholder","render","msg","width","height","href","sprite","to","useSelector","selectAuthError","Notify"],"sourceRoot":""}