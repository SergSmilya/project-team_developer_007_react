{"version":3,"file":"static/js/418.1a2c6025.chunk.js","mappings":"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","sources":["components/SignUpForm/SignUpForm.jsx","pages/RegisterPage/RegisterPage.jsx","webpack://project-team_developer_007_react/./src/components/SignUpForm/SignUpForm.module.css?655f"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useLocation, useNavigate, Link } from 'react-router-dom';\nimport { useCallback, useEffect, useState } from 'react';\nimport { register } from 'redux/auth/operations';\nimport sprite from '../../images/svg/sprite.svg';\nimport css from './SignUpForm.module.css';\n\nconst initialValues = { name: '', email: '', password: '' };\n\nconst emailRegexp = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\nconst schema = yup.object().shape({\n  email: yup.string().matches(emailRegexp, 'Email is not valid').required(),\n  password: yup.string().min(6).required(),\n});\n\nexport const SignUpForm = () => {\n  const dispatch = useDispatch();\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  const [isRegisterPage, setIsRegisterPage] = useState(true);\n\n  useEffect(() => {\n    if (pathname === '/signin') {\n      setIsRegisterPage(false);\n    }\n  }, [pathname]);\n\n  const handleNavigate = useCallback(() => {\n    isRegisterPage ? navigate('/signin') : navigate('/register');\n  }, [navigate, isRegisterPage]);\n\n  const handleFormSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    resetForm();\n    handleNavigate();\n  };\n\n  return (\n    <section className={css.Registration__Section}>\n      <div className={css.Registration__container}>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={schema}\n          validateOnChange={false}\n          validateOnBlur={false}\n          onSubmit={handleFormSubmit}\n        >\n          {({ errors, touched, values }) => (\n            <Form className={css.Registration__form}>\n              <b className={css.Registration__title}>Registration</b>\n\n              <label className={css.Registration__label}>\n                <div className={css.Registration__inputwrapper}>\n                  <Field\n                    className={`${css.Registration__input} ${\n                      touched.name && errors.name\n                        ? `${css.Registration__input_error}`\n                        : touched.name &&\n                          !errors.name &&\n                          values.name.length >= 1\n                        ? `${css.Registration__input_success}`\n                        : ''\n                    }`}\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    required\n                  />\n\n                  <svg\n                    width={18}\n                    height={18}\n                    className={`${css.Registration__svg} ${\n                      touched.name && errors.name\n                        ? `${css.Registration__svg_error}`\n                        : touched.name &&\n                          !errors.name &&\n                          values.name.length >= 1\n                        ? `${css.Registration__svg_success}`\n                        : ''\n                    }`}\n                  >\n                    <use href={sprite + '#reg-name'} />\n                  </svg>\n                </div>\n              </label>\n\n              <label className={css.Registration__label}>\n                <div className={css.Registration__inputwrapper}>\n                  <Field\n                    className={`${css.Registration__input} ${\n                      touched.email && errors.email\n                        ? `${css.Registration__input_error}`\n                        : touched.email &&\n                          !errors.email &&\n                          emailRegexp.test(values.email)\n                        ? `${css.Registration__input_success}`\n                        : ''\n                    }`}\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    required\n                  />\n                  <ErrorMessage\n                    name=\"email\"\n                    render={msg => (\n                      <p className={css.Registration__error}>{msg}</p>\n                    )}\n                  />\n\n                  <svg\n                    width={18}\n                    height={18}\n                    className={`${css.Registration__svg} ${\n                      touched.email && errors.email\n                        ? `${css.Registration__svg_error}`\n                        : touched.email &&\n                          !errors.email &&\n                          emailRegexp.test(values.email)\n                        ? `${css.Registration__svg_success}`\n                        : ''\n                    }`}\n                  >\n                    <use href={sprite + '#reg-email'} />\n                  </svg>\n                </div>\n              </label>\n\n              <label className={css.Registration__label}>\n                <div className={css.Registration__inputwrapper}>\n                  <Field\n                    className={`${css.Registration__input} ${\n                      touched.password && errors.password\n                        ? `${css.Registration__input_error}`\n                        : touched.password &&\n                          !errors.password &&\n                          values.password.length >= 6\n                        ? `${css.Registration__input_success}`\n                        : ''\n                    }`}\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    required\n                  />\n                  <ErrorMessage\n                    name=\"password\"\n                    render={msg => (\n                      <p className={css.Registration__error}>\n                        Enter a valid Password\n                      </p>\n                    )}\n                  />\n\n                  <svg\n                    width={18}\n                    height={18}\n                    className={`${css.Registration__svg} ${\n                      touched.password && errors.password\n                        ? `${css.Registration__svg_error}`\n                        : touched.password &&\n                          !errors.password &&\n                          values.password.length >= 6\n                        ? `${css.Registration__svg_success}`\n                        : ''\n                    }`}\n                  >\n                    <use href={sprite + '#reg-pass'} />\n                  </svg>\n                </div>\n              </label>\n\n              <button className={css.Registration__button} type=\"submit\">\n                Sign up\n              </button>\n            </Form>\n          )}\n        </Formik>\n        <Link className={css.Registration__link} to=\"/signin\">\n          Sign In\n        </Link>\n      </div>\n    </section>\n  );\n};\n","import { SignUpForm } from 'components/SignUpForm/SignUpForm';\nimport { useSelector } from 'react-redux';\nimport { selectAuthError } from 'redux/auth/selectors';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst RegisterPage = () => {\n  const error = useSelector(selectAuthError);\n\n  if (error !== 'Unable to fetch user') {\n    Notify.failure(error);\n  }\n\n  return (\n    <>\n      <SignUpForm />\n    </>\n  );\n};\n\nexport default RegisterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"Registration__Section\":\"SignUpForm_Registration__Section__My4Ys\",\"Registration__container\":\"SignUpForm_Registration__container__ou-63\",\"Registration__form\":\"SignUpForm_Registration__form__vYYLk\",\"Registration__title\":\"SignUpForm_Registration__title__Q8P7x\",\"Registration__label\":\"SignUpForm_Registration__label__BIh-q\",\"Registration__input\":\"SignUpForm_Registration__input__woy2a\",\"Registration__button\":\"SignUpForm_Registration__button__K3mhK\",\"Registration__link\":\"SignUpForm_Registration__link__DIztg\",\"Registration__error\":\"SignUpForm_Registration__error__rF721\",\"Registration__input_success\":\"SignUpForm_Registration__input_success__OycYd\",\"Registration__input_error\":\"SignUpForm_Registration__input_error__9kTvw\",\"Registration__inputwrapper\":\"SignUpForm_Registration__inputwrapper__M5hn7\",\"Registration__svg\":\"SignUpForm_Registration__svg__XohDY\",\"Registration__svg_success\":\"SignUpForm_Registration__svg_success__4+Cq3\",\"Registration__svg_error\":\"SignUpForm_Registration__svg_error__gGuSA\"};"],"names":["initialValues","name","email","password","emailRegexp","schema","yup","shape","matches","required","min","SignUpForm","dispatch","useDispatch","pathname","useLocation","navigate","useNavigate","useState","isRegisterPage","setIsRegisterPage","useEffect","handleNavigate","useCallback","className","css","validationSchema","validateOnChange","validateOnBlur","onSubmit","values","resetForm","register","errors","touched","length","type","placeholder","width","height","href","sprite","test","render","msg","to","error","useSelector","selectAuthError","Notify"],"sourceRoot":""}